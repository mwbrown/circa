
def defer_draw(any command)
    send('lincoln.draw', command)

namespace mode
    hidden = 0
    list_available_configs = 1
    highlight_config = 2

current_mode = receive_stateful('lincoln.current_mode', 0)
listed_configs = receive_stateful('lincoln.config_list', [])
highlighted_config = receive_stateful('lincoln.highlighted_config' null)

-- Public functions

-- Draw the pink rounded rect. This is used for multiple purposes, and it smoothly
-- blends when it changes shape.
namespace activerect
    state rect = Rect()

    state transition_from = null
    state transition_to
    state time_since_target_change = 0.0

    time_since_target_change += td
    time_for_full_transition = 0.5

    reached_target = true

    target_rect = receive_last('lincoln.active.size' null)
    if target_rect != null and target_rect != transition_to
        transition_from = rect
        transition_to = target_rect
        time_since_target_change = 0.0

    if transition_from != null
        r = time_since_target_change / time_for_full_transition
        min(@r, 1.0)
        smoothstep(@r, 0, 1)
        if rect == Rect()
            r = 1.0

        rect = interp_rect(transition_from transition_to r)
        send('lincoln.should_redraw' true)
        and(@reached_target false)

        if r >= 1
            transition_from = null
            rect = transition_to

    Rect(@rect)

    -- Receive changes to opacity
    target_opacity = receive_stateful('lincoln.active.opacity', 0.0) -> number

    opacity = approach(target_opacity .1)

    if opacity != target_opacity
        send('lincoln.should_redraw' true)
        and(@reached_target false)
    else
        -- After we reach the target, redraw once more.
        if once()
            send('lincoln.should_redraw' true)

    def correct_color(Color c) -> Color
        c[3] = c[3] * opacity
        return c

    if changed(reached_target)
        send('lincoln.should_redraw' true)

    def draw(cairo:Context cr)
        p1 = [rect.x1 rect.y1]
        width = rect.x2 - rect.x1
        height = rect.y2 - rect.y1
        cr.new_sub_path()
        radius = 12.0
        cr.arc(p1 + [width - radius, radius] radius, -90, 0)
        cr.arc(p1 + [width - radius, height - radius], radius, 0, 90)
        cr.arc(p1 + [radius, height - radius], radius, 90, 180)
        cr.arc(p1 + [radius, radius], radius, 180, 270)
        cr.close_path()
        cr.set_source_color(#d08 -> correct_color)
        cr.fill_preserve()
        cr.set_source_color(#00f8 -> correct_color)
        cr.set_line_width(10.0)
        cr.stroke()

    defer_draw([draw])

def draw_highlighted_config(cairo:Context cr)

    topleft = [100 window.height - 120]

    gutter = 20
    inner_loc = topleft + [gutter gutter]

    name = "<name>"
    value = "<value>"
    if highlighted_config != null
        Ref(@highlighted_config)
        name = highlighted_config.name()
        value = highlighted_config.to_string()
    str = concat(name ': ' value)

    cr.select_font_face("Sans")
    cr.set_font_size(20.0)
    str_extents = cr.text_extents(str)

    str_width = str_extents.size[0]
    width = str_width + gutter*2
    text_height = str_extents.size[1]
    height = text_height + gutter*2

    click_rect = to_rect(inner_loc [str_width text_height])

    -- clip text to the current activerect
    cr.rectangle(activerect:rect)
    cr.clip()

    -- draw text
    cr.set_source_color(activerect:correct_color(#fff))
    cr.move_to(inner_loc+[0 text_height])
    cr.show_text(str)

    -- handle mouse dragging
    if highlighted_config != null
        Ref(@highlighted_config)

        state dragging = false
        if mouse_clicked(click_rect)
            dragging = true
        elif not(mouse_pressed())
            dragging = false
        if dragging
            highlighted_config.tweak(-delta_point(mouse).y)

        for tweak in receive('tweak_events')
            highlighted_config.tweak(tweak)

    send('lincoln.active.size' to_rect(topleft [width height]))

    -- clear clip
    cr.reset_clip()

def draw_config_list(cairo:Context cr)
    send('lincoln.active.size' [100 350 300 400])

    configs = listed_configs

    type Layout {
        string str
        Point size
        Ref term
    }

    cr.set_font_size(16.0)

    -- Loop through each config and get layout
    content_height = 0.0
    content_width = 0.0
    text_spacing = 6.0

    layouts = for c in configs
        Ref(@c)
        str = concat(c.name() ': ' c.to_string())
        size = cr.text_extents(str).size -> Point
        content_height += size.y + text_spacing
        max(@content_width size.x)
        Layout([str size c])

    rect_size = [content_width content_height] -> Point

    topleft = [30 30] -> Point
    gutter = 15
    active_rect = to_rect(topleft - [gutter gutter] rect_size + [gutter gutter]*2)
    send('lincoln.active.size' active_rect)

    -- clip text to the current activerect
    cr.rectangle(activerect:rect)
    cr.clip()

    i = 0
    y = topleft.y
    for layout in layouts
        Layout(@layout)
        loc = [topleft.x y]
        height = Point(layout.size).y

        -- Highlight rect
        rect = to_rect(loc layout.size)
        if mouse_over(rect)
            cr.set_source_color(#000)

        if mouse_clicked(rect)
            send('lincoln.selected_config' layout.term)

        cr.set_source_color(activerect:correct_color(#fff))
        cr.move_to(loc + [0 height])
        cr.show_text(layout.str)
        y += height + text_spacing

    cr.reset_clip()


if current_mode == mode:highlight_config
    defer_draw([draw_highlighted_config])
    send('lincoln.active.opacity' 1.0)
    send('lincoln.should_redraw' true)
elif current_mode == mode:list_available_configs
    defer_draw([draw_config_list])
    send('lincoln.active.opacity' 1.0)
    send('lincoln.should_redraw' true)
else
    send('lincoln.active.opacity' 0.0)

namespace handle_input
    selected_config = receive_last('lincoln.selected_config' null)

    if selected_config != null
        send('lincoln.current_mode' mode:highlight_config)
        send('lincoln.highlighted_config' selected_config)

namespace post_frame
    state surface = null
    window_size = [window.width window.height]
    if surface == null or changed(window_size)
        surface = cairo:create_image_surface(window_size)

    state texture = opengl:new_texture_handle()

    commandList = receive('lincoln.draw')

    redraw = once() or changed(commandList)
    or(@redraw receive_last('lincoln.should_redraw' false))

    if redraw
        cr = cairo:create_context_for_surface(surface)

        -- Clear the buffer
        cr.save()
        cr.set_operator(cairo:Operator:clear)
        cr.paint()
        cr.restore()

        -- run the command list
        for command in commandList
            List(@command)
            func = command[0]
            args = command.slice(1, command.length())

            args.insert(0, cr)

            dynamic_call(func args)

        cairo:upload_surface_to_opengl(surface texture)

    opengl:draw_texture_as_quad(texture to_rect([0 0] window_size))

namespace lincoln
    def default_control(Branch branch)
        if key_pressed('5')
            trace('redrawing')
            send('lincoln.should_redraw', true)

        if key_pressed('1')
            trace('listing configs..')
            send('lincoln.current_mode', 1)
            send('lincoln.config_list', branch.list_configs())

        if key_pressed('3')
            send('lincoln.current_mode', 0)

    def osc_listen()
        for msg in osc:listen(8000)
            name = msg[0] -> string
            value = msg[1] -> number

            send('tweak_events', delta(value) * 100)

