
desired_window_size = [500 300]

background(#000)
include('shared/drifting_stars.ca' -> rpath)

type Ship {
    Point loc,
    Point momentum,
    number facing
}

type Bullet {
    number lifespan,
    Point loc,
    Point direction
}

-- Return a point that is wrapped around the playable area
def wrap_around(Point p) -> Point
    return [mod(p.x, window.width) mod(p.y, window.height)]

def new_ship() -> Ship
    return [[window.width/2 window.height/2] [0 0] 0]

state Ship ship = new_ship()
state List bullets = []

accelration_per_s = 5.0
rotation_speed = 270.0
ship_drag = 0.991
speed_limit = 1.8
bullet_speed = 200.0
bullet_width = 2.0

ship_size = 1.2
ship_front = 10.0
ship_back = 6.4
ship_wing_size = 11.4
ship_wing_rot = 140
ship_radius = ship_size * ship_front

asteroid_speed_modifier = 1.0

draw_intersection_circles = false

namespace game_state
    playing = 0
    dying = 1

state int gstate = game_state:playing

def srand() -> number
    state value = rand()
    return value

def draw_ship(Point loc, number facing)
    def ship_point(number rot, number dist) -> Point
        return polar(rot + facing) * dist*ship_size + loc

    points = [ship_point(0 ship_front)
                  ship_point(ship_wing_rot ship_wing_size)
                  ship_point(180 ship_back)
                  ship_point(-ship_wing_rot ship_wing_size)]

    sides = []
    for i in 0..4
        sides.append([points[i] points[(i+1)%4]])

    -- If we're dying then the ship is coming apart
    if gstate == game_state:dying
        for side in @sides
            a = side[0] -> Point
            b = side[1] -> Point
            drift = srand()*elapsed()*30
            side = [a+drift b+drift]

    line_points = []
    for side in sides
        line_points.append(side[0])
        line_points.append(side[1])

    gl:lines(line_points #fff)

    if draw_intersection_circles
        gl:circle(loc, ship_radius, #f00)

-- Ship control
if gstate == game_state:playing
    rotation = cond(key_down(key:left), -1, 0)
    cond(key_down(key:right), 1, @rotation)
    ship.facing = ship.facing + rotation * rotation_speed * time_delta

    -- Keyboard controls for acceleration
    thrust = cond(key_down(key:up), 1, 0)
    cond(key_down(key:down), -1, @thrust)

    ship.momentum += polar(ship.facing) * thrust * accelration_per_s * time_delta

    -- Press space to shoot a bullet
    if key_pressed(key:space)
        bullets.append([0, ship.loc polar(ship.facing)] -> Bullet)

-- Add drag
ship.momentum = ship.momentum * ship_drag

-- Enforce a speed limit on ship.momentum
speed = magnitude(ship.momentum)
if speed > speed_limit
    ship.momentum = ship.momentum * (speed_limit / speed)

-- Move ship
ship.loc = ship.loc + ship.momentum
ship.loc = wrap_around(ship.loc)


-- Move bullets
for bullet in @bullets
    Bullet(@bullet)
    loc = bullet.loc + bullet.direction * bullet_speed * time_delta
    wrap_around(@loc)
    bullet = [bullet.lifespan+time_delta, loc, bullet.direction] -> Bullet

-- Remove old bullets
bullet_max_lifespan = 1.8
for bullet in @bullets
    Bullet(@bullet)
    if bullet.lifespan >= bullet_max_lifespan
        discard

-- Draw bullets
for bullet in bullets
    Bullet(@bullet)
    points = [bullet.loc + [-1 -1] * bullet_width,
                  bullet.loc + [1 -1] * bullet_width,
                  bullet.loc + [1 1] * bullet_width,
                  bullet.loc + [-1 1] * bullet_width]
    gl:line_loop(points #fff)

type Asteroid {
  List edges
  Point location
  Point vel
  number rotation
  number rotation_vel
  number size
  number age
}

type Particle {
  number age
  Point loc
  Point vel
}

state List particles

asteroid_collision_radius = 20.0
asteroid_starting_size = 30.0
asteroid_num_edges = 10

def generate_asteroid(number size) -> Asteroid
    edges = for index in 0..10
        angle = index / asteroid_num_edges * 360
        (polar(angle) * (rand() * size + size/3)) -> Point

    rotation = (rand() * .2 - .1) * 360
    return [edges, random_location(), random_norm_vector()*10, 0, rotation size 0]

def generate_child_asteroid(Asteroid parent) -> Asteroid
    size = parent.size / 2
    edges = for index in 0..10
        angle = index / asteroid_num_edges * 360
        (polar(angle) * (rand() * size + size/3)) -> Point
    rotation = (rand() * .2 - .1) * 360
    speed = rand()*20 + 20.0
    return [edges, parent.location, random_norm_vector()*speed, 0, rotation size 0]

def generate_particle_burst(List particles, Point loc, Point vel) -> List
    for i in 0..6
        particles.append([0.0 loc vel*[rand() rand()] + [(rand()-.5)*100 (rand()-.5)*100]] -> Particle)
    return particles

state List asteroids = []
state num_destroyed_asteroids = 0

asteroid_count = 3

if asteroids.length() > asteroid_count
    asteroids.resize(asteroid_count)

if once()
    for i in 0..3
        as = generate_asteroid(asteroid_starting_size)
        asteroids.append(as)

-- move asteroids
for asteroid in @asteroids
    Asteroid(@asteroid)
    asteroid.location += asteroid.vel * time_delta * asteroid_speed_modifier
    asteroid.rotation += asteroid.rotation_vel * time_delta * asteroid_speed_modifier
    asteroid.location = wrap_around(asteroid.location)
    asteroid.age += time_delta

-- draw asteroids
for asteroid in asteroids
    Asteroid(@asteroid)

    edges = for p in asteroid.edges
        @p -> Point
        rotate_point(@p, asteroid.rotation)
        add(@p, asteroid.location)

    gl:line_loop(edges, #fff)

-- Check for collisions of asteroids and bullets
spawned = []

for asteroid in @asteroids
    Asteroid(@asteroid)
    collides = false

    for bullet in @bullets
        bullet = bullet -> Bullet
        if point_distance(asteroid.location, bullet.loc) < asteroid.size
            collides = true

            bullet_vel = Point(bullet.direction * bullet_speed)
            generate_particle_burst(@particles, asteroid.location, bullet_vel)

            discard

    if collides
        discard

    if collides and asteroid.size > 10
        spawned.append(generate_child_asteroid(asteroid))
        spawned.append(generate_child_asteroid(asteroid))
        if rand() > .5
            spawned.append(generate_child_asteroid(asteroid))

for spawn in spawned
    Asteroid(@spawn)
    asteroids.append(spawn)

-- Check for collisions of asteroids and ship
for asteroid in asteroids
    asteroid -> Asteroid
    if point_distance(asteroid.location, ship.loc) < (asteroid.size + ship_radius)
        gstate = game_state:dying

draw_ship(ship.loc, ship.facing)

-- Update the dying state
if gstate == game_state:dying
    death_time = elapsed()

    if death_time > 3.0
        gstate = game_state:playing
        ship = new_ship()

max_particle_age = 3.0

-- Draw/update particles
for particle in @particles
    Particle(@particle)

    lifespan = particle.age / max_particle_age
    max(@lifespan, 1.0)
    color = #555 + #111 * (lifespan * 9)

    gl:points([particle.loc], color)

    particle.loc = particle.loc + particle.vel * td
    particle.age = particle.age + td

    if particle.age > max_particle_age
        discard

-- lincoln UI
include('libs/lincoln.ca')
lincoln:default_control(reflect:this_branch())
